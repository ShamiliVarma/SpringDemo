package org.arpit.java2blog.dao;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.arpit.java2blog.bean.Employee;
import org.arpit.java2blog.entity.EmployeeEntity;
import org.arpit.java2blog.mapper.EmployeeMapper;
import org.arpit.java2blog.mapper.EmployeeResultSet;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.stereotype.Component;

@Component
public class EmployeeDAO {

	List<Employee> emplist = new ArrayList<Employee>();
	Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();
	private static int idPrefix = 1010;

	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Autowired
	private SessionFactory sessionFactory;

	private static Logger log = Logger.getLogger(EmployeeDAO.class);

	public EmployeeDAO() {
		log.info("In EmployeeDAO constructor");
		// getAllEmployeesfromDB();
		empMap.put(1001, new Employee(1001, "Shamili", "T"));
		empMap.put(1002, new Employee(1002, "Asvi", "P"));
		empMap.put(1003, new Employee(1003, "Ivaan", "L"));
		empMap.put(1004, new Employee(1004, "Jessi", "G"));
		empMap.put(1005, new Employee(1005, "Mickey", "M"));

	}

	public static int getAutoGeneratedId() {
		return idPrefix++;
	}

	/*
	 * Methods to get hardcoded employee data which is set in constructor
	 */

	public List<Employee> getAllEmployees() {
		return new ArrayList<Employee>(empMap.values());
	}

	public Employee getEmployee(int id) {
		if (empMap.containsKey(id)) {
			return empMap.get(id);
		} else {
			return null;
		}
	}

	public int addEmployee(Employee emp) {
		System.out.println("In EmployeeDAO :: addEmployee");
		int idForNewEmployee = getAutoGeneratedId();
		emp.setEmpId(idForNewEmployee);
		empMap.put(idForNewEmployee, emp);
		return emp.getEmpId();
	}

	public int editEmployee(Employee emp) {
		empMap.put(emp.getEmpId(), emp);
		return emp.getEmpId();
	}

	public int deleteEmployee(Employee emp) {
		empMap.remove(emp.getEmpId());
		return emp.getEmpId();

	}

	/*
	 * Methods to get employee data from DB
	 */

	public List<Employee> getAllEmployeesfromDB() {
		String selectQuery = "SELECT * FROM EMPLOYEES";
		return jdbcTemplate.query(selectQuery, new EmployeeMapper());
	}

	/*
	 * public List<Employee> getAllEmployeesfromDBRS() { String selectQuery =
	 * "SELECT * FROM EMPLOYEES"; return jdbcTemplate.query(selectQuery, new
	 * EmployeeResultSet()); }
	 */

	/*
	 * public Employee getEmployeebyIdfromDB(int id) { String selectQuery =
	 * "SELECT * FROM EMPLOYEES WHERE ID="+id; return
	 * jdbcTemplate.query(selectQuery, new EmployeeResultSet()); //return
	 * jdbcTemplate.queryForObject(selectQuery,new Object[] {id}, new
	 * EmployeeMapper()); }
	 */

	public List<Employee> getEmpbyIdPrepStmnt(final int id) {
		String selectQuery = "SELECT * FROM EMPLOYEES WHERE ID=?";

		return jdbcTemplate.query(selectQuery, new PreparedStatementSetter() {

			@Override
			public void setValues(PreparedStatement arg0) throws SQLException {
				arg0.setInt(1, id);

			}
		}, new EmployeeMapper());
	}

	public int insertData(Employee emp) {
		int idForNewEmployee = getAutoGeneratedId();
		emp.setEmpId(idForNewEmployee);
		String insertDataQuery = "Insert INTO Employees (id, first_name,last_name,email) values(" + idForNewEmployee
				+ ",'" + emp.getFirstName() + "','" + emp.getLastName() + "','Minnie@gmail.com')";
		jdbcTemplate.update(insertDataQuery);
		return emp.getEmpId();
	}

	public int updateData(Employee emp) {
		String updateDataQuery = "UPDATE Employees SET first_name = '" + emp.getFirstName() + "',last_name='"
				+ emp.getLastName() + "' WHERE ID = " + emp.getEmpId();
		jdbcTemplate.update(updateDataQuery);
		return emp.getEmpId();
	}

	public int deleteData(Employee emp) {
		String deleteDataQuery = "DELETE FROM Employees WHERE ID = " + emp.getEmpId();
		jdbcTemplate.update(deleteDataQuery);
		return emp.getEmpId();
	}

	/*
	 * Methods to get employee and address from DB
	 */

	/*
	 * public List<Employee> getAllEmployeesAndAddressfromDB() { String selectQuery
	 * =
	 * "SELECT Employee.id, Employee.first_name, Employee.last_name, address.county,"
	 * +
	 * "address.city,address.state FROM EMPLOYEES Employee, EmployeeAddress address WHERE Employee.id=address.id"
	 * ; return jdbcTemplate.query(selectQuery, new EmployeeMapper()); }
	 */

	public Employee getEmployeesAndAddressbyIdfromDB(int id) {
		String selectQuery = "SELECT Employee.id, Employee.first_name, Employee.last_name, address.county,"
				+ "address.city,address.state FROM EMPLOYEES Employee, EmployeeAddress address WHERE Employee.id=address.id AND Employee.id="
				+ id;
		return jdbcTemplate.query(selectQuery, new EmployeeResultSet());

	}

	/*
	 * public int insertEmployeesAndAddress(Employee emp) {
	 * 
	 * String insertDataQuery =
	 * "Insert INTO Employees (first_name,last_name,email) values('"+emp.
	 * getFirstName()+"','"+emp.getLastName()+"','"+emp.getFirstName()+
	 * "@gmail.com')"; emp.setEmpId(jdbcTemplate.update(insertDataQuery)); String
	 * insertAddressQuery =
	 * "Insert INTO EmployeeAddress (id,county,city,state) values("+emp.getEmpId()+
	 * ",'"+emp.getEmployeeAddress().getCounty()+"','"+emp.getEmployeeAddress().
	 * getCity()+"','"+emp.getEmployeeAddress().getState()+"')";
	 * jdbcTemplate.update(insertAddressQuery);
	 * 
	 * 
	 * int idForNewEmployee = getAutoGeneratedId(); emp.setEmpId(idForNewEmployee);
	 * String insertDataQuery =
	 * "Insert INTO Employees (id,first_name,last_name,email) values(?,?,?,?)";
	 * jdbcTemplate.update(insertDataQuery, emp.getEmpId(), emp.getFirstName(),
	 * emp.getLastName(), emp.getFirstName() + "@gmail.com"); String
	 * insertAddressQuery =
	 * "Insert INTO EmployeeAddress (id, county, city, state) values(?,?,?,?)";
	 * jdbcTemplate.update(insertAddressQuery, emp.getEmpId(),
	 * emp.getEmployeeAddress().getCounty(), emp.getEmployeeAddress().getCity(),
	 * emp.getEmployeeAddress().getState());
	 * System.out.println("Inserted data into 2 tables with Id :: " +
	 * emp.getEmpId());
	 * 
	 * 
	 * String insertDataQuery =
	 * "insert into Employees (first_name,last_name,email) values(?,?,?)"; KeyHolder
	 * keyHolder = new GeneratedKeyHolder(); //execption ::
	 * PreparedStatementCallback; uncategorized SQLException for SQL [insert into
	 * Employees (first_name,last_name,email) values(?,?,?)]; SQL state [90026];
	 * error code [90026]; Serialization failed, cause:
	 * "java.io.NotSerializableException: org.arpit.java2blog.dao.EmployeeDAO$2"
	 * [90026-196]; nested exception is org.h2.jdbc.JdbcSQLException: Serialization
	 * failed, cause:
	 * "java.io.NotSerializableException: org.arpit.java2blog.dao.EmployeeDAO$2"
	 * [90026-196] jdbcTemplate.update(insertDataQuery, new
	 * PreparedStatementSetter() {
	 * 
	 * @Override public void setValues(PreparedStatement arg0) throws SQLException {
	 * arg0.setString(1, emp.getFirstName()); arg0.setString(2, emp.getLastName());
	 * arg0.setString(3, emp.getFirstName()+"@gmail.com");
	 * 
	 * } }, keyHolder);
	 * 
	 * System.out.println(keyHolder.getKey());
	 * 
	 * String insertAddressQuery =
	 * "Insert INTO EmployeeAddress (id, county, city, state) values(?,?,?,?)";
	 * jdbcTemplate.update(insertAddressQuery,keyHolder.getKey(),emp.
	 * getEmployeeAddress().getCounty(),emp.getEmployeeAddress().getCity(),emp.
	 * getEmployeeAddress().getState());
	 * 
	 * return emp.getEmpId(); }
	 */

	/*
	 * public int updateEmployeesAndAddress(Employee emp) { String updateDataQuery =
	 * "UPDATE Employees SET first_name = ?,last_name=? WHERE ID = ? ";
	 * jdbcTemplate.update(updateDataQuery, emp.getFirstName(), emp.getLastName(),
	 * emp.getEmpId()); String updateAddressQuery =
	 * "UPDATE EmployeeAddress SET county = ?,city=?, state=?  WHERE ID = ?";
	 * jdbcTemplate.update(updateAddressQuery, emp.getEmployeeAddress().getCounty(),
	 * emp.getEmployeeAddress().getCity(), emp.getEmployeeAddress().getState(),
	 * emp.getEmpId()); return emp.getEmpId(); }
	 */

	/*
	 * public int deleteEmployeesAndAddress(Employee emp) { String deleteDataQuery =
	 * "DELETE FROM EmployeeAddress WHERE ID = ?";
	 * jdbcTemplate.update(deleteDataQuery, emp.getEmpId()); deleteDataQuery =
	 * "DELETE FROM Employees WHERE ID = ?"; jdbcTemplate.update(deleteDataQuery,
	 * emp.getEmpId()); return emp.getEmpId(); }
	 */


	/*
	 * public List<EmployeeEntity> getAllEmployeesAndAddressfromDB() { Session
	 * session = sessionFactory.getCurrentSession(); return
	 * session.createQuery("FROM EmployeeEntity").list(); }
	 */
	
	public List<EmployeeEntity> getAllEmployeesAndAddressfromDB() {
		Session session = sessionFactory.getCurrentSession();
		return (List<EmployeeEntity>) session.getNamedQuery("EmployeeEntity.getAllDetails").list();
	}

	public EmployeeEntity getEmployeebyIdfromDB(int id) {
		Session session = sessionFactory.getCurrentSession();
		//return (EmployeeEntity) session.get(EmployeeEntity.class, id);
		
		return (EmployeeEntity) session.getNamedQuery("EmployeeEntity.getDetailsById").setParameter(0, id).list().get(0);
	}

	public int insertEmployeesAndAddress(EmployeeEntity empEntity) {
		System.out.println("In EmployeeDAO :: insertEmployeesAndAddress");
		Session session = sessionFactory.getCurrentSession();
		return (int) session.save(empEntity);
	}

	public int changeEmpAndAddress(EmployeeEntity empEntity) {
		System.out.println("In EmployeeDAO :: changeEmpAndAddress");
		Session session = sessionFactory.getCurrentSession();
		session.update(empEntity);
		return empEntity.getEmpId();
	}

	public void deleteEmployeesAndAddress(EmployeeEntity empEntity) {
		System.out.println("In EmployeeDAO :: deleteEmployeesAndAddress");
		Session session = sessionFactory.getCurrentSession();
		session.delete(empEntity);
	}

	public List<Employee> getEmployeesBySearch(String startsWith) {
		Session session = sessionFactory.getCurrentSession();

		Criteria criteria = session.createCriteria(EmployeeEntity.class);
		// Criteria : First Name starts with "" AND emp Id <=1003

		criteria.add(Restrictions.ilike("firstName", startsWith + "%"));
		criteria.add(Restrictions.le("empId", 1005));

		// Criteria : First Name Starts with between A and ""
		// criteria.add(Restrictions.between("firstName", "A", startsWith));

		// Criteria : First Name starts with "" OR emp Id <=1003
		// criteria.add(Restrictions.or(Restrictions.ilike("firstName", startsWith+"%"),
		// Restrictions.le("empId", 1003)));

		// Criteria Order desc
		criteria.addOrder(Order.asc("firstName"));

		// Add Projections for getting unique first name - It just gives Count
		// criteria.setProjection(Projections.countDistinct("firstName"));
		List<EmployeeEntity> employees = criteria.list();

		List<Employee> employeeList = new ArrayList<Employee>();
		for (EmployeeEntity emp : employees) {
			Employee employee = new Employee();
			employee.setEmpId(emp.getEmpId());
			employee.setFirstName(emp.getFirstName());
			employee.setLastName(emp.getLastName());
			employeeList.add(employee);
		}
		return employeeList;
	}
}
